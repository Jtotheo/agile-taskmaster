{"version":3,"sources":["components/Header.js","components/TaskCreator.js","components/Columns.js","App.js","index.js"],"names":["Header","className","TaskCreator","props","useState","task","setTask","subject","setSubject","auth","setAuth","tasklist","setTasklist","taskCol","setTaskCol","drag","ev","dataTransfer","setData","target","id","updateTaskColArr","arr","ind","col","newArr","card","map","el","draggable","onDragStart","onClick","answer","prompt","toLocaleLowerCase","remove","removeElement","document","getElementById","console","log","changeCardColor","title","length","type","placeholder","value","onChange","e","Columns","columnName","setColumnName","columns","setColumns","sessionStarted","setSessionStarted","allowDrop","preventDefault","drop","data","getData","appendChild","column","onDragOver","onDrop","i","updatedArr","filter","deleteEl","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.caeae2c4.chunk.js","sourcesContent":["import React from \"react\";\r\n// Just returning a header\r\nexport function Header() {\r\n  return <h2 className=\"mainHeader\">Agile Taskmaster</h2>;\r\n}\r\n","import { React, useState } from \"react\";\r\n\r\nexport function TaskCreator(props) {\r\n  const [task, setTask] = useState(\"\");\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [auth, setAuth] = useState(\"\");\r\n  const [tasklist, setTasklist] = useState([]);\r\n  const [taskCol, setTaskCol] = useState([\"red\"]);\r\n\r\n  // Functions updates the input fields by updating the respective states\r\n  function handleChangeUpp(e) {\r\n    setTask(e.target.value);\r\n  }\r\n  function handleChangSub(e) {\r\n    setSubject(e.target.value);\r\n  }\r\n  function handleChangeAuth(e) {\r\n    setAuth(e.target.value);\r\n  }\r\n  // Function updates the \"tasklist\"-state array, as well as creating an element in the \"taskCol\"-state array,\r\n  // so that colors will change only for the individual task card.\r\n  function handleClick() {\r\n    if (task) {\r\n      setTasklist([\r\n        ...tasklist,\r\n        {\r\n          title: task ? task : \"\",\r\n          subject: subject ? subject : \"\",\r\n          auth: auth ? auth : \"\",\r\n        },\r\n      ]);\r\n      setTask(\"\");\r\n      setSubject(\"\");\r\n      setAuth(\"\");\r\n      setTaskCol([...taskCol, \"red\"]);\r\n    }\r\n  }\r\n\r\n  //  Function deletes element after confirming with prompt.\r\n  function removeElement(el) {\r\n    let answer = prompt(\"If you wish to delete the task, type 'delete'\");\r\n    if (answer) {\r\n      if (answer.toLocaleLowerCase() === \"delete\") {\r\n        el.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function to make the tasks draggable\r\n  function drag(ev) {\r\n    ev.dataTransfer.setData(\"text\", ev.target.id);\r\n  }\r\n  // Functions updates the className of the individual task card div, by changing the proper element in the \"taskCol\" state array.\r\n  function updateTaskColArr(arr, ind, col) {\r\n    let newArr = [...arr];\r\n    newArr[ind] = col;\r\n    return newArr;\r\n  }\r\n\r\n  function changeCardColor(ind) {\r\n    console.log(taskCol, taskCol[ind]);\r\n    if (taskCol[ind] === \"red\") {\r\n      return setTaskCol(updateTaskColArr(taskCol, ind, \"yellow\"));\r\n    } else if (taskCol[ind] === \"yellow\") {\r\n      return setTaskCol(updateTaskColArr(taskCol, ind, \"green\"));\r\n    } else {\r\n      return setTaskCol(updateTaskColArr(taskCol, ind, \"red\"));\r\n    }\r\n  }\r\n  // Variable that accepts the returned result of mapping the \"tasklist\" state array, with the correct HTML-elements.\r\n  let card = tasklist.map((el, ind) => {\r\n    return (\r\n      <div\r\n        key={ind}\r\n        id={ind}\r\n        // Classname of the card is derived from the \"taskCol\" state array, so background color changes when \"changeColorButton\"\r\n        // is clicked.\r\n        className={`card ${taskCol[ind]}`}\r\n        draggable=\"true\"\r\n        onDragStart={drag}\r\n      >\r\n        <button\r\n          className=\"deleteButtonCard\"\r\n          onClick={() => removeElement(document.getElementById(`${ind}`))}\r\n        >\r\n          Delete\r\n        </button>\r\n        <button\r\n          className=\"changeColorButton\"\r\n          onClick={() => changeCardColor(ind)}\r\n        >\r\n          Change color\r\n        </button>\r\n        <div className=\"taskInfo\">\r\n          <h3>{el.title}</h3>\r\n          <p>{el.subject}</p>\r\n          <p>{el.auth}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  // Component returns HTML- elements, after conditions have been met\r\n  return (\r\n    <>\r\n      <div className=\"taskInput\">\r\n        {tasklist.length === 0 ? (\r\n          <p className=\"instructions\">\r\n            Now create a taskcard, and drag it to the appropriate container!\r\n          </p>\r\n        ) : tasklist.length === 1 ? (\r\n          <p className=\"instructions\">\r\n            Drag and drop your card in the appropriate container, after which,\r\n            you may create a new task card.\r\n          </p>\r\n        ) : tasklist.length === 2 ? (\r\n          <p className=\"instructions\">\r\n            You can delete either the column, or the task card, by clicking the\r\n            delete button in the upper left corners!\r\n          </p>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"inputfieldTask\">\r\n          <input\r\n            className=\"inputField\"\r\n            type=\"text\"\r\n            placeholder=\"Task\"\r\n            value={task}\r\n            onChange={handleChangeUpp}\r\n          />\r\n          <input\r\n            className=\"inputField\"\r\n            type=\"text\"\r\n            placeholder=\"Subject\"\r\n            value={subject}\r\n            onChange={handleChangSub}\r\n          />\r\n          <input\r\n            className=\"inputField\"\r\n            type=\"text\"\r\n            placeholder=\"Responsible\"\r\n            value={auth}\r\n            onChange={handleChangeAuth}\r\n          />\r\n          <button className=\"inputFieldButton\" onClick={handleClick}>\r\n            Create task\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div>{card}</div>\r\n    </>\r\n  );\r\n}\r\n","import { React, useState } from \"react\";\r\nimport { TaskCreator } from \"./TaskCreator\";\r\n\r\nexport function Columns(props) {\r\n  const [columnName, setColumnName] = useState(\"\");\r\n  const [columns, setColumns] = useState([]);\r\n  const [sessionStarted, setSessionStarted] = useState(false);\r\n\r\n  // Function updates the input field by updating the columnName-state\r\n  function handleChange(ev) {\r\n    setColumnName(ev.target.value);\r\n    console.log(columnName);\r\n  }\r\n\r\n  // Function updates the columns array based off the columnName-state\r\n  function createColumn() {\r\n    if (columnName) {\r\n      setSessionStarted(true);\r\n      setColumns([...columns, columnName]);\r\n      setColumnName(\"\");\r\n    }\r\n  }\r\n\r\n  // Functions to allow other divs to be dropped on the columns\r\n  function allowDrop(ev) {\r\n    ev.preventDefault();\r\n  }\r\n\r\n  function drop(ev) {\r\n    ev.preventDefault();\r\n    let data = ev.dataTransfer.getData(\"text\");\r\n    ev.target.appendChild(document.getElementById(data));\r\n  }\r\n\r\n  // Function that deletes the column, and updates the state of the columns-array\r\n  function deleteEl(i) {\r\n    let answer = prompt(\r\n      \"If you wish to delete the column as well as contained tasks, type 'delete'. If you only wish to delete the column please move the tasks to another column first.\"\r\n    );\r\n    if (answer) {\r\n      if (answer.toLocaleLowerCase() === \"delete\") {\r\n        let updatedArr = columns.filter((el, ind) => {\r\n          if (ind !== i) {\r\n            return el;\r\n          }\r\n          return \"\";\r\n        });\r\n        setColumns(updatedArr);\r\n      }\r\n    }\r\n  }\r\n  // Variable that accepts the returned result from mapping the \"columns\"-state array, with the HTML-elements\r\n  const column = columns.map((el, ind) => {\r\n    return (\r\n      <div\r\n        className=\"column\"\r\n        key={el + ind}\r\n        onDragOver={allowDrop}\r\n        onDrop={drop}\r\n      >\r\n        <h3 className=\"columnHeader\">{el}</h3>\r\n        <button\r\n          className=\"columnDeleteButt\"\r\n          onClick={() => {\r\n            deleteEl(ind);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  });\r\n  // Component returns HTML- elements, after conditions have been met\r\n  return (\r\n    <>\r\n      <div className=\"inputFieldsContainer\">\r\n        <div className=\"containerInput\">\r\n          {columns.length === 0 ? (\r\n            <p className=\"instructions\">\r\n              Welcome to the agile taskmaster! Please begin by adding one or\r\n              more columns where you will place your task cards .\r\n            </p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {columns.length <= 4 ? (\r\n            <div className=\"inputfieldColumn\">\r\n              <input\r\n                className=\"inputField\"\r\n                value={columnName}\r\n                onChange={handleChange}\r\n                placeholder=\"Heading\"\r\n              ></input>\r\n              <button className=\"createContainerButton\" onClick={createColumn}>\r\n                Create task column\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div>Max number of columns used</div>\r\n          )}\r\n        </div>\r\n        {sessionStarted ? <TaskCreator /> : \"\"}\r\n      </div>\r\n      <div className=\"columnContainer\">{column}</div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\r\n\r\nimport { Header } from \"./components/Header\";\r\nimport { Columns } from \"./components/Columns\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Columns />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n// import reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// // If you want to start measuring performance in your app, pass a function\r\n// // to log results (for example: reportWebVitals(console.log))\r\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}